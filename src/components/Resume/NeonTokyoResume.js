import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import React, { useState, useEffect } from 'react';
import { Calendar, MapPin, Github, Linkedin, Award, Code, Briefcase, Heart, GraduationCap, ExternalLink } from 'lucide-react';
const NeonTokyoResume = ({ personalInfo }) => {
    const [glitchText, setGlitchText] = useState(false);
    const [activeSection, setActiveSection] = useState('profile');
    // Handle case where personalInfo might be undefined or incomplete
    if (!personalInfo) {
        return (_jsx("div", { className: "min-h-screen bg-black text-white flex items-center justify-center", children: _jsxs("div", { className: "text-center", children: [_jsx("h1", { className: "text-4xl font-bold text-cyan-400 mb-4", children: "Loading..." }), _jsx("p", { className: "text-gray-400", children: "Personal information not available" })] }) }));
    }
    useEffect(() => {
        const glitchInterval = setInterval(() => {
            setGlitchText(true);
            setTimeout(() => setGlitchText(false), 200);
        }, 5000);
        return () => clearInterval(glitchInterval);
    }, []);
    const formatDate = (date) => {
        if (typeof date === 'string')
            return date;
        return date.toLocaleDateString('en-US', { month: 'short', year: 'numeric' });
    };
    const SkillBar = ({ skill }) => (_jsxs("div", { className: "mb-4", children: [_jsxs("div", { className: "flex justify-between items-center mb-2", children: [_jsx("span", { className: "text-cyan-300 font-mono text-sm", children: skill.name }), _jsxs("span", { className: "text-pink-400 text-xs", children: [Math.round(skill.level * 100), "%"] })] }), _jsx("div", { className: "w-full bg-gray-800 rounded-full h-2 overflow-hidden", children: _jsx("div", { className: "h-full bg-gradient-to-r from-cyan-500 to-pink-500 rounded-full transition-all duration-1000 ease-out shadow-lg shadow-cyan-500/50", style: { width: `${skill.level * 100}%` } }) })] }));
    const GlowCard = ({ children, className = "" }) => (_jsx("div", { className: `bg-gray-900/80 backdrop-blur-sm border border-cyan-500/30 rounded-lg p-6 shadow-2xl shadow-cyan-500/20 hover:shadow-pink-500/20 transition-all duration-300 hover:border-pink-500/50 ${className}`, children: children }));
    return (_jsxs("div", { className: "min-h-screen bg-black text-white relative overflow-hidden", children: [_jsxs("div", { className: "fixed inset-0 pointer-events-none", children: [_jsx("div", { className: "absolute inset-0", children: [...Array(50)].map((_, i) => (_jsx("div", { className: "absolute w-px bg-gradient-to-b from-transparent via-cyan-400 to-transparent opacity-30", style: {
                                left: `${Math.random() * 100}%`,
                                height: `${Math.random() * 100 + 50}px`,
                                animationDelay: `${Math.random() * 2}s`,
                                animation: 'rain 2s linear infinite'
                            } }, i))) }), _jsx("div", { className: "absolute inset-0 bg-[linear-gradient(rgba(0,255,255,0.03)_1px,transparent_1px),linear-gradient(90deg,rgba(0,255,255,0.03)_1px,transparent_1px)] bg-[size:50px_50px]" }), _jsx("div", { className: "absolute top-1/4 left-1/4 w-96 h-96 bg-cyan-500/20 rounded-full blur-3xl animate-pulse" }), _jsx("div", { className: "absolute bottom-1/4 right-1/4 w-96 h-96 bg-pink-500/20 rounded-full blur-3xl animate-pulse", style: { animationDelay: '1s' } })] }), _jsxs("div", { className: "relative z-10 container mx-auto px-4 py-8", children: [_jsxs("div", { className: "text-center mb-12", children: [_jsx("h1", { className: `text-6xl font-bold mb-4 bg-gradient-to-r from-cyan-400 via-pink-500 to-purple-500 bg-clip-text text-transparent ${glitchText ? 'animate-pulse' : ''}`, children: personalInfo?.name || 'Name Not Available' }), _jsxs("div", { className: "flex justify-center items-center space-x-6 text-cyan-300 mb-4", children: [personalInfo?.location && (_jsxs("div", { className: "flex items-center space-x-2", children: [_jsx(MapPin, { className: "w-4 h-4" }), _jsx("span", { className: "font-mono", children: personalInfo.location })] })), personalInfo?.github && (_jsxs("a", { href: personalInfo.github, className: "flex items-center space-x-2 hover:text-pink-400 transition-colors", children: [_jsx(Github, { className: "w-4 h-4" }), _jsx("span", { className: "font-mono", children: "GitHub" })] })), personalInfo?.linkedin && (_jsxs("a", { href: personalInfo.linkedin, className: "flex items-center space-x-2 hover:text-pink-400 transition-colors", children: [_jsx(Linkedin, { className: "w-4 h-4" }), _jsx("span", { className: "font-mono", children: "LinkedIn" })] }))] })] }), _jsx("div", { className: "flex justify-center mb-8", children: _jsx("div", { className: "bg-gray-900/60 backdrop-blur-sm border border-cyan-500/30 rounded-full p-2", children: ['profile', 'experience', 'projects', 'skills'].map((section) => (_jsx("button", { onClick: () => setActiveSection(section), className: `px-6 py-2 rounded-full font-mono text-sm transition-all duration-300 ${activeSection === section
                                    ? 'bg-gradient-to-r from-cyan-500 to-pink-500 text-black shadow-lg'
                                    : 'text-cyan-300 hover:text-white hover:bg-gray-800/50'}`, children: section.toUpperCase() }, section))) }) }), _jsxs("div", { className: "grid grid-cols-1 lg:grid-cols-3 gap-8", children: [_jsxs("div", { className: "lg:col-span-2 space-y-8", children: [activeSection === 'profile' && personalInfo?.education && (_jsxs(GlowCard, { children: [_jsxs("div", { className: "flex items-center space-x-3 mb-6", children: [_jsx(GraduationCap, { className: "w-6 h-6 text-cyan-400" }), _jsx("h2", { className: "text-2xl font-bold text-cyan-300", children: "Education" })] }), _jsx("div", { className: "space-y-4", children: _jsxs("div", { children: [_jsxs("h3", { className: "text-xl font-semibold text-pink-400", children: [personalInfo.education.degree, " ", personalInfo.education.major] }), personalInfo.education.minor && (_jsxs("p", { className: "text-cyan-300", children: ["Minor: ", personalInfo.education.minor] })), personalInfo.education.certificate && (_jsxs("p", { className: "text-cyan-300", children: ["Certificate: ", personalInfo.education.certificate] })), _jsxs("p", { className: "text-gray-400 font-mono", children: [personalInfo.education.university, " \u2022 ", formatDate(personalInfo.education.graduationDate)] }), _jsxs("p", { className: "text-gray-400 font-mono", children: [personalInfo.education.location, " \u2022 GPA: ", personalInfo.education.gpa] })] }) })] })), activeSection === 'experience' && (_jsxs(_Fragment, { children: [personalInfo?.jobs && personalInfo.jobs.length > 0 && (_jsxs(GlowCard, { children: [_jsxs("div", { className: "flex items-center space-x-3 mb-6", children: [_jsx(Briefcase, { className: "w-6 h-6 text-cyan-400" }), _jsx("h2", { className: "text-2xl font-bold text-cyan-300", children: "Work Experience" })] }), _jsx("div", { className: "space-y-6", children: personalInfo.jobs.map((job, index) => (_jsxs("div", { className: "border-l-2 border-pink-500/50 pl-6", children: [_jsx("h3", { className: "text-xl font-semibold text-pink-400", children: job.position }), _jsxs("p", { className: "text-cyan-300 font-mono", children: [job.company, " \u2022 ", job.location] }), _jsxs("p", { className: "text-gray-400 text-sm font-mono mb-3", children: [formatDate(job.startDate), " - ", job.current ? 'Present' : formatDate(job.endDate)] }), _jsx("ul", { className: "space-y-1 mb-3", children: job.descriptionBulletPoints.map((point, i) => (_jsx("li", { className: "text-gray-300 text-sm", children: point }, i))) }), job.technologies.length > 0 && (_jsx("div", { className: "flex flex-wrap gap-2", children: job.technologies.map((tech, i) => (_jsx("span", { className: "px-2 py-1 bg-gray-800 text-cyan-300 text-xs rounded border border-cyan-500/30 font-mono", children: tech }, i))) }))] }, index))) })] })), personalInfo?.volunteer && personalInfo.volunteer.length > 0 && (_jsxs(GlowCard, { children: [_jsxs("div", { className: "flex items-center space-x-3 mb-6", children: [_jsx(Heart, { className: "w-6 h-6 text-pink-400" }), _jsx("h2", { className: "text-2xl font-bold text-pink-300", children: "Volunteer Experience" })] }), _jsx("div", { className: "space-y-6", children: personalInfo.volunteer.map((vol, index) => (_jsxs("div", { className: "border-l-2 border-cyan-500/50 pl-6", children: [_jsx("h3", { className: "text-xl font-semibold text-cyan-400", children: vol.position }), _jsxs("p", { className: "text-pink-300 font-mono", children: [vol.organization, vol.suborganization && ` â€¢ ${vol.suborganization}`] }), _jsxs("p", { className: "text-gray-400 text-sm font-mono mb-3", children: [formatDate(vol.startDate), " - ", vol.current ? 'Present' : formatDate(vol.endDate), " \u2022 ", vol.location] }), _jsx("ul", { className: "space-y-1", children: vol.descriptionBulletPoints.map((point, i) => (_jsx("li", { className: "text-gray-300 text-sm", children: point }, i))) })] }, index))) })] }))] })), activeSection === 'projects' && personalInfo?.projects && personalInfo.projects.length > 0 && (_jsxs(GlowCard, { children: [_jsxs("div", { className: "flex items-center space-x-3 mb-6", children: [_jsx(Code, { className: "w-6 h-6 text-cyan-400" }), _jsx("h2", { className: "text-2xl font-bold text-cyan-300", children: "Projects" })] }), _jsx("div", { className: "grid gap-6", children: personalInfo.projects.map((project, index) => (_jsxs("div", { className: "bg-gray-800/50 rounded-lg p-4 border border-gray-700 hover:border-pink-500/50 transition-colors", children: [_jsxs("div", { className: "flex justify-between items-start mb-3", children: [_jsx("h3", { className: "text-xl font-semibold text-pink-400", children: project.title }), project.link && (_jsx("a", { href: project.link, className: "text-cyan-400 hover:text-pink-400 transition-colors", children: _jsx(ExternalLink, { className: "w-5 h-5" }) }))] }), _jsx("p", { className: "text-gray-300 mb-3", children: project.description }), _jsx("div", { className: "flex flex-wrap gap-2", children: project.technologies.map((tech, i) => (_jsx("span", { className: "px-2 py-1 bg-gray-900 text-cyan-300 text-xs rounded border border-cyan-500/30 font-mono", children: tech }, i))) })] }, index))) })] })), activeSection === 'skills' && personalInfo?.skills && personalInfo.skills.length > 0 && (_jsxs(GlowCard, { children: [_jsxs("div", { className: "flex items-center space-x-3 mb-6", children: [_jsx(Code, { className: "w-6 h-6 text-cyan-400" }), _jsx("h2", { className: "text-2xl font-bold text-cyan-300", children: "Technical Skills" })] }), _jsx("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-4", children: personalInfo.skills.map((skill, index) => (_jsx(SkillBar, { skill: skill }, index))) })] }))] }), _jsxs("div", { className: "space-y-8", children: [personalInfo?.awards && personalInfo.awards.length > 0 && (_jsxs(GlowCard, { children: [_jsxs("div", { className: "flex items-center space-x-3 mb-6", children: [_jsx(Award, { className: "w-6 h-6 text-yellow-400" }), _jsx("h2", { className: "text-2xl font-bold text-yellow-300", children: "Awards" })] }), _jsx("div", { className: "space-y-4", children: personalInfo.awards.map((award, index) => (_jsxs("div", { className: "bg-gray-800/50 rounded-lg p-4 border border-gray-700", children: [_jsx("h3", { className: "text-lg font-semibold text-yellow-400", children: award.title }), _jsx("p", { className: "text-cyan-300 font-mono text-sm", children: award.organization }), _jsxs("p", { className: "text-gray-400 text-sm font-mono", children: [formatDate(award.date), " \u2022 ", award.location] }), award.description && (_jsx("p", { className: "text-gray-300 text-sm mt-2", children: award.description }))] }, index))) })] })), personalInfo?.skills && personalInfo.skills.length > 0 && (_jsxs(GlowCard, { children: [_jsx("h3", { className: "text-xl font-bold text-cyan-300 mb-4", children: "Top Skills" }), _jsx("div", { className: "space-y-3", children: personalInfo.skills
                                                    .sort((a, b) => b.level - a.level)
                                                    .slice(0, 5)
                                                    .map((skill, index) => (_jsxs("div", { className: "flex justify-between items-center", children: [_jsx("span", { className: "text-gray-300 font-mono text-sm", children: skill.name }), _jsx("div", { className: "flex space-x-1", children: [...Array(5)].map((_, i) => (_jsx("div", { className: `w-2 h-2 rounded-full ${i < Math.round(skill.level * 5)
                                                                    ? 'bg-gradient-to-r from-cyan-400 to-pink-400'
                                                                    : 'bg-gray-700'}` }, i))) })] }, index))) })] }))] })] })] }), _jsx("style", { jsx: true, children: `
        @keyframes rain {
          to {
            transform: translateY(100vh);
          }
        }
      ` })] }));
};
export default NeonTokyoResume;
